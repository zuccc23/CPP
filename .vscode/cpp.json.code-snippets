{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Class declaration C++": {
		"prefix": "class_declare",
		"body": [
		"class ${1:NomClasse} {",
		"\tpublic:",
		"\t\t${1:NomClasse}();",
		"\t\t${1:NomClasse}(const ${1:NomClasse}& to_copy);",
		"\t\t${1:NomClasse}& operator=(const ${1:NomClasse}& to_copy);",
		"\t\t~${1:NomClasse}();",
		"",
		"\tprivate:",
		 "\t\t/*content*/",
		"    $0",
		"};"
		],
		"description": "Create a class"
	},

	"Class implementation C++": {
		"prefix": "class_implement",
		"body": [
		"//CONSTRUCTOR",
		"${1:NomClasse}::${1:NomClasse}() {",
		"}",
		"",
		"//COPY CONSTRUCTOR",
		"${1:NomClasse}::${1:NomClasse}(const ${1:NomClasse}& to_copy) {",
		"}",
		"",
		"//COPY ASSIGNMENT",
		"${1:NomClasse}& ${1:NomClasse}::operator=(const ${1:NomClasse}& to_copy) {",
		"}",
		"",
		"//DESTRUCTOR",
		"${1:NomClasse}::~${1:NomClasse}() {",
		"}\n",
		"//PUBLIC\n",
		"//PRIVATE\n"
		],
		"description": "Implement the canon form"
	}
}