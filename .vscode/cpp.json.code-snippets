{
	"Class declaration C++": {
		"prefix": "class_declare",
		"body": [
		"class ${1:NomClasse} {",
		"\tpublic:",
		"\t\t${1:NomClasse}();",
		"\t\t${1:NomClasse}(const ${1:NomClasse}& to_copy);",
		"\t\t${1:NomClasse}& operator=(const ${1:NomClasse}& to_copy);",
		"\t\t~${1:NomClasse}();",
		"",
		"\tprivate:",
		 "\t\t/*content*/",
		"    $0",
		"};"
		],
		"description": "Create a class"
	},

	"Class implementation C++": {
		"prefix": "class_implement",
		"body": [
		"//CONSTRUCTOR(S)",
		"${1:NomClasse}::${1:NomClasse}() {",
		"\tstd::cout << \"\\033[90m✿ constructor called✿\\033[0m\" << std::endl;",
		"}",
		"",
		"//COPY CONSTRUCTOR",
		"${1:NomClasse}::${1:NomClasse}(const ${1:NomClasse}& to_copy) {",
		"\tstd::cout << \"\\033[90m✿ copy constructor called✿\\033[0m\" << std::endl;",
		"\t*this = to_copy;",
		"}",
		"",
		"//COPY ASSIGNMENT",
		"${1:NomClasse}& ${1:NomClasse}::operator=(const ${1:NomClasse}& to_copy) {",
		"\tstd::cout << \"\\033[90m✿ copy assignment operator called✿\\033[0m\" << std::endl;",
		"\tif (this != &to_copy)",
		"\t{",
		"\t\t//stuff to copy",
		"\t}",
		"\treturn (*this);",
		"}",
		"",
		"//DESTRUCTOR",
		"${1:NomClasse}::~${1:NomClasse}() {",
		"\tstd::cout << \"\\033[90m~ destructor called\\033[0m\" << std::endl;",
		"}\n",
		"//PUBLIC\n",
		"//PRIVATE\n"
		],
		"description": "Implement the canon form"
	},

	"Main cpp": {
		"prefix": "cpp_main",
		"body": [
		"std::cout << std::endl << \"===== Making objects =====\" << std::endl ;\n\n",
		"std::cout << std::endl << \"===== Tests =====\" << std::endl ;\n\n",
		"std::cout << std::endl << \"===== Destructors =====\" << std::endl ;\n",
		"return(0);"
		],
		"description": "basic cpp main"
	},

	"print std::cout": {
		"prefix": "ppprint",
		"body": [
		"std::cout << \"\" << std::endl;"
		],
		"description": "print something on std::cout"
	},

	"header define": {
		"prefix": "header_define",
		"body": [
		"#ifndef ${1:NameHeader}\n",
		"# define ${1:NameHeader}\n",
		"#include <string.h>",
		"#include <iostream>",
		"#include <stdlib.h>\n\n\n",
		"#endif"
		],
		"description": "write header info"
	}
}